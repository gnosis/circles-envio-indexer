type GlobalStats {
  id: ID!
  signups: BigInt!
  transfers: BigInt!
  trusts: BigInt!
}

# new schema

enum TransferType {
  Erc20WrapperTransfer
  TransferSingle
  TransferBatch
  Demurrage
  PersonalMint
  StreamCompleted
  HubTransfer
  Transfer
  GroupMintSingle
  GroupMintBatch
  GroupRedeem
  GroupRedeemCollateralReturn
  GroupRedeemCollateralBurn
  MetriFee
}

type Transaction {
  id: ID! # transactionHash-avatarId
  safeTxHash: String
  blockNumber: Int!
  timestamp: Int!
  transactionIndex: Int!
  transactionHash: String! @index
  transactionTransfers: [TransactionTransfer!]! @derivedFrom(field: "transaction")
}

type TransactionTransfer {
  id: ID! # transactionHash-logIndex-avatarId
  avatar: Avatar! @index
  transaction: Transaction!
  transfer: Transfer!
}

type Transfer {
  # id is: transactionHash-logIndex
  id: ID!
  transactions: [TransactionTransfer!]! @derivedFrom(field: "transfer")
  transactionHash: String! @index
  logIndex: Int!
  # v1 or v2
  version: Int!
  # only for v2
  operator: String
  from: String!
  to: String!
  value: BigInt!
  transferType: TransferType!
  # is either the v2 token-id or the v1 token address
  token: String!
  isPartOfStreamOrHub: Boolean!
}

type TrustRelation {
  # is is truster-trustee-version
  id: ID!
  blockNumber: Int!
  timestamp: Int!
  transactionIndex: Int!
  logIndex: Int!
  version: Int!
  trustee: Avatar!
  truster: Avatar!
  # v2 only or always UInt256.MAX in case of v1
  expiryTime: BigInt!
  # v1 only or always '100' in case of v2
  limit: BigInt!
  isMutual: Boolean!
  isMigrated: Boolean!
}

enum AvatarType {
  Signup
  OrganizationSignup
  RegisterHuman
  Invite
  RegisterGroup
  RegisterOrganization
  Unknown
  Migrating
}

type AvatarBalance {
  # id is avatar-token
  id: ID!
  token: Token!
  avatar: Avatar!
  balance: BigInt!
  # this will be the opposite as the token type. Inflationary if demurrage, deflationary if static
  computedValue: BigInt!
  lastCalculated: Int
}

type Avatar {
  # the avatar address
  id: ID!
  blockNumber: Int!
  timestamp: Int!
  transactionIndex: Int!
  logIndex: Int!
  transactionHash: String!
  version: Int!
  avatarType: AvatarType!
  # v2 only invited by
  invitedBy: String
  token: Token
  # v2 wrapped token id
  wrappedTokenId: String
  # IPFS CID of the avatar's profile
  cidV0: String
  # balances of all tokens
  balances: [AvatarBalance!]! @derivedFrom(field: "avatar")
  # array of trusts given
  trustsGiven: [TrustRelation!]! @derivedFrom(field: "truster")
  # array of trusts received
  trustsReceived: [TrustRelation!]! @derivedFrom(field: "trustee")
  # count of trusts given
  trustsGivenCount: Int!
  # count of trusts received
  trustsReceivedCount: Int!
  lastMint: Int
  isVerified: Boolean!
  profile: Profile
  migrated: Boolean!
}

type Profile {
  id: ID!
  name: String
  description: String
  # groups only
  symbol: String
  previewImageUrl: String
  imageUrl: String
}

enum TokenType {
  RegisterGroup
  RegisterHuman
  Signup
  WrappedDemurrageToken
  WrappedStaticToken
}

type Token {
  # token address in v1 and token id in v2
  id: ID!
  blockNumber: Int!
  timestamp: Int!
  transactionIndex: Int!
  logIndex: Int!
  transactionHash: String!
  version: Int!
  tokenType: TokenType!
  tokenOwner: Avatar!
  totalSupply: BigInt!
}
